import{o as e,c as l,a as t}from"./app.14b541e2.js";const i='{"title":"为什么要造轮子？","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么要造轮子？","slug":"为什么要造轮子？"},{"level":2,"title":"PepperBot有何不同？","slug":"pepperbot有何不同？"}],"relativePath":"Introduction/motivation.md","lastUpdated":1617135227885}',o={},r=t('<h2 id="为什么要造轮子？"><a class="header-anchor" href="#为什么要造轮子？" aria-hidden="true">#</a> 为什么要造轮子？</h2><ul><li>现有框架，不够直观，不够“符合直觉”</li><li>具体一点说，就是现有的qq机器人框架，写业务逻辑都很累，需要很多模板代码，我希望能消除这些模板代码，所以自己写了个框架</li></ul><blockquote><p>选择用python实现的原因是，有一阵子没写python了，有点生疏</p></blockquote><h2 id="pepperbot有何不同？"><a class="header-anchor" href="#pepperbot有何不同？" aria-hidden="true">#</a> PepperBot有何不同？</h2><ul><li>拒绝臃肿繁琐的模板代码，专注于业务逻辑</li><li>拒绝五花八门的插件系统，使用python语言自身的mixin等机制，实现代码的复用</li><li>api符合语意</li><li>提供足够的自由度，同时又有一定的最佳实践，不用纠结于框架本身</li><li>battery-include，自带指令等常用功能，不需要自己实现</li><li>渐进式在于，一开始完全可以不用理会PepperBot提供的指令等功能，只需要使用最简单的事件响应机制，即可制作出功能强大而灵活的机器人</li><li></li></ul><blockquote><p>此处应有与其它框架，实现相同功能的代码对比</p></blockquote>',6);o.render=function(t,i,o,p,a,n){return e(),l("div",null,[r])};export default o;export{i as __pageData};

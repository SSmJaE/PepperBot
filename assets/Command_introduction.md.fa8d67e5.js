import{o as n,c as s,a}from"./app.4461c8af.js";const t='{"title":"默认的initial，“开启指令“查询装备”的会话”","description":"","frontmatter":{},"relativePath":"Command/introduction.md","lastUpdated":1617094966949}',p={},o=a('<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>指令系统尚未实现，这里只是展示指令系统可能的样子</p></div><div class="language-py"><pre><code><span class="token decorator annotation punctuation">@as_command</span><span class="token punctuation">(</span>\n    needPrefix<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>\n    prefix<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dan &quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">#都是正则，自动加上^</span>\n    also<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;查询&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;测试&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">#都是正则</span>\n    excludeClassName<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token comment">#类名本身不作为指令</span>\n    exit<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;^/exit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;^退出&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我?退出(对话)?&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">#都是正则</span>\n    at<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token comment">#是否需要at机器人</span>\n    timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token comment"># 会话超时时间，单位秒</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">class</span> 查询装备<span class="token punctuation">:</span>\n\n    context<span class="token punctuation">:</span> <span class="token builtin">dict</span>\n\n\n    <span class="token comment"># 默认的initial，“开启指令“查询装备”的会话”</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">initial</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>messages<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        reply<span class="token punctuation">(</span><span class="token string">&quot;开始执行指令&quot;</span><span class="token punctuation">)</span>\n        reply<span class="token punctuation">(</span><span class="token string">&quot;请按照 /查询装备 游戏名 装备名 的格式输入&quot;</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>first\n\n    <span class="token comment"># onFormatError默认按照pattern自动组合输出 </span>\n    <span class="token comment"># 请按照 /查询装备 game character 的格式输入</span>\n    <span class="token comment"># first和之后的FormatError格式应该有点区别</span>\n    <span class="token comment"># 输入参数无效，character应为文字， 数字</span>\n    <span class="token comment"># &lt;:face&gt; &lt;:image&gt;</span>\n    <span class="token comment"># pattern间的空格，表示至少1个空白字符</span>\n    <span class="token comment"># 参数全部以关键字参数的形式传入，</span>\n    <span class="token comment"># 所以方法的参数的顺序可以随意，但是参数名称必须和pattern中的名称一致</span>\n    <span class="token comment"># 参数的类型由框架保证</span>\n    <span class="token comment"># pattern &lt;something:123&gt; 中的123并不是有效的python类型</span>\n    <span class="token decorator annotation punctuation">@pattern</span><span class="token punctuation">(</span>\n        <span class="token comment"># 不提供类型，默认全部str</span>\n        <span class="token string">&quot;&lt;game:str&gt; &lt;character:str&gt;&quot;</span><span class="token punctuation">,</span> \n        onFormatError<span class="token operator">=</span><span class="token string">&quot;请按照 /查询装备 游戏名 装备名 的格式输入&quot;</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">first</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>messages<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        game <span class="token operator">=</span> messages<span class="token punctuation">[</span><span class="token string">&quot;game&quot;</span><span class="token punctuation">]</span>\n        reply<span class="token punctuation">(</span><span class="token string">&quot;你选择的是{game}的{character}角色，需要查询他的什么装备呢？&quot;</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>second\n\n    <span class="token comment"># ?:表示可选</span>\n    <span class="token comment"># 进入对话指令context，此时用户不再需要输入/查询装备</span>\n    <span class="token comment"># return True继续命令执行，return False触发中断</span>\n    <span class="token decorator annotation punctuation">@pattern</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;armor:str&gt; &lt;rarity?:int&gt;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">second</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>messages<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> messages<span class="token punctuation">[</span><span class="token string">&#39;rarity&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n            results <span class="token operator">=</span> getData<span class="token punctuation">(</span>armor<span class="token punctuation">,</span> rarity<span class="token punctuation">)</span>\n            reply<span class="token punctuation">(</span><span class="token string">&quot;查询到以下装备{results}&quot;</span><span class="token punctuation">)</span>\n\n            <span class="token keyword">return</span> <span class="token boolean">None</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            reply<span class="token punctuation">(</span><span class="token string">&quot;armor有如下稀有度{1 2 3 4 5}&quot;</span><span class="token punctuation">)</span>\n            reply<span class="token punctuation">(</span><span class="token string">&quot;你要查询的是哪一个呢？&quot;</span><span class="token punctuation">)</span>\n\n            <span class="token keyword">return</span> self<span class="token punctuation">.</span>third\n\n    <span class="token decorator annotation punctuation">@pattern</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;rarity:int&gt;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">third</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>messages<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token comment"># 可以从指令的context中获取到之前几次对话获取到的参数</span>\n        armor <span class="token operator">=</span> self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">&#39;second&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;armor&#39;</span><span class="token punctuation">]</span>\n        results <span class="token operator">=</span> getData<span class="token punctuation">(</span>armor<span class="token punctuation">,</span> rarity<span class="token punctuation">)</span>\n        reply<span class="token punctuation">(</span><span class="token string">&quot;查询到以下装备{results}&quot;</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> <span class="token boolean">None</span>\n        <span class="token comment"># 显式return None，或者不return，都会结束会话，触发finish生命周期</span>\n\n    <span class="token comment"># 用户主动退出</span>\n    <span class="token decorator annotation punctuation">@pattern</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;something?:str&gt;&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">exit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>messages<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        reply<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;收到了离开消息</span><span class="token interpolation"><span class="token punctuation">{</span>messages<span class="token punctuation">[</span><span class="token string">&#39;something&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n\n    <span class="token comment"># 流程正常退出(在中间的流程return False/None也是正常退出)</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">finish</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        reply<span class="token punctuation">(</span><span class="token string">&quot;以下为对话历史&quot;</span><span class="token punctuation">)</span>\n        <span class="token keyword">for</span> order<span class="token punctuation">,</span> info <span class="token keyword">in</span> self<span class="token punctuation">.</span>context<span class="token punctuation">:</span>\n            reply<span class="token punctuation">(</span><span class="token string">&quot;第{order}次对话&quot;</span><span class="token punctuation">)</span>\n            reply<span class="token punctuation">(</span><span class="token string">&quot;用户输入{info[&quot;</span>message<span class="token string">&quot;]}&quot;</span><span class="token punctuation">)</span>\n            reply<span class="token punctuation">(</span><span class="token string">&quot;解析出如下参数&quot;</span><span class="token punctuation">)</span>\n            <span class="token keyword">for</span> argName<span class="token punctuation">,</span> argValue <span class="token keyword">in</span> info<span class="token punctuation">[</span><span class="token string">&#39;args&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>\n                reply<span class="token punctuation">(</span><span class="token string">&quot;{argName} {argValue}&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">timeout</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>messages<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        reply<span class="token punctuation">(</span><span class="token string">&quot;用户超时未回复，结束会话&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">error</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> error<span class="token punctuation">,</span> <span class="token operator">**</span>messages<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        reply<span class="token punctuation">(</span><span class="token string">&quot;执行过程中未捕获的错误&quot;</span><span class="token punctuation">)</span>\n        reply<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>error<span class="token punctuation">.</span>message<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n        reply<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>error<span class="token punctuation">.</span>trace<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>\n        \n\n\n<span class="token comment"># 另一种定义pattern的方式</span>\n<span class="token keyword">class</span> <span class="token class-name">FirstMethodPatternModel</span><span class="token punctuation">(</span>PatternModel<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    game<span class="token punctuation">:</span>Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span>\n    character<span class="token punctuation">:</span><span class="token builtin">str</span>\n    onFormatError<span class="token operator">=</span><span class="token string">&quot;请按照 /查询装备 游戏名 装备名 的格式输入&quot;</span>\n\n</code></pre></div>',2);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};

import{o as n,c as s,a}from"./app.14b541e2.js";const t='{"title":"注册群事件","description":"","frontmatter":{},"relativePath":"index.md","lastUpdated":1620471902809}',p={},o=a('<h1 align="center">PepperBot</h1><p align="center">A lightweight QQ bot logic framework, for human</p><div class="language-py"><pre><code><span class="token comment"># 注册群事件</span>\n<span class="token decorator annotation punctuation">@register</span><span class="token punctuation">(</span>groupId<span class="token operator">=</span><span class="token number">123456789</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">WhateverNameYouWant</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">&quot;&quot;&quot;class名称可以随意设置&quot;&quot;&quot;</span>\n\n    <span class="token comment"># 如方法名add_group所示，这是加群请求的事件响应</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">add_group</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bot<span class="token punctuation">:</span> AddGroupBot<span class="token punctuation">,</span> comment<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">if</span> <span class="token string">&quot;加入我&quot;</span> <span class="token keyword">in</span> comment<span class="token punctuation">:</span>\n            <span class="token keyword">await</span> bot<span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 接受</span>\n        <span class="token keyword">else</span><span class="token punctuation">:</span>\n            <span class="token keyword">await</span> bot<span class="token punctuation">.</span>reject<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 拒绝</span>\n\n    <span class="token comment"># 事件也有生命周期，before，after，可以进行拦截等操作</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">before_group_message</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">pass</span>\n\n    <span class="token comment"># 群聊消息的事件响应</span>\n    <span class="token comment"># 所有参数都有完善的类型提示，不需要记忆，以PascalCase的方法名加上参数名即可</span>\n    <span class="token comment"># 如 GroupMessageBot = group_message + bot</span>\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">group_message</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bot<span class="token punctuation">:</span> GroupMessageBot<span class="token punctuation">,</span> chain<span class="token punctuation">:</span> MessageChain<span class="token punctuation">,</span> sender<span class="token punctuation">:</span> Sender<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token comment"># chain即为消息链，pure_text是消息中的纯文本，不包含表情、图片等</span>\n        <span class="token keyword">if</span> <span class="token string">&quot;撤回我&quot;</span> <span class="token operator">==</span> chain<span class="token punctuation">.</span>pure_text<span class="token punctuation">:</span>\n            <span class="token keyword">await</span> chain<span class="token punctuation">.</span>withdraw<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 可以直接“撤回消息”，符合直觉</span>\n\n        <span class="token keyword">if</span> <span class="token string">&quot;踢出我&quot;</span> <span class="token operator">==</span> chain<span class="token punctuation">.</span>pure_text<span class="token punctuation">:</span>\n            <span class="token keyword">await</span> sender<span class="token punctuation">.</span>kickout<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 可以直接踢出发言群员</span>\n\n        <span class="token comment"># 也可以对消息链进行in操作，相当于in chain.pure_text</span>\n        <span class="token keyword">if</span> <span class="token string">&quot;禁言我&quot;</span> <span class="token keyword">in</span> chain<span class="token punctuation">:</span>\n            <span class="token keyword">await</span> sender<span class="token punctuation">.</span>ban<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 可以直接禁言发言群员</span>\n\n        <span class="token comment"># 判断消息链中，是否包含文本消息&quot;禁言我&quot;</span>\n        <span class="token comment"># 与上一条语句不等价</span>\n        <span class="token comment"># 如果消息链为Text(&quot;请禁言我)，则并不与Text(&quot;禁言我&quot;)相等</span>\n        <span class="token comment"># 因为pure_text是所有Text片段join起来的</span>\n        <span class="token comment"># 如果有Text(&quot;文字1&quot;)Face(100)Text(&quot;文字2&quot;)这样一条消息</span>\n        <span class="token comment"># 则pure_text为&quot;文字1文字2&quot;</span>\n        <span class="token keyword">if</span> Text<span class="token punctuation">(</span><span class="token string">&quot;禁言我&quot;</span><span class="token punctuation">)</span> <span class="token keyword">in</span> chain<span class="token punctuation">:</span>\n            <span class="token keyword">pass</span>\n\n        <span class="token comment"># 可以直接判断消息链中是否包含表情，并不指定是哪一个表情</span>\n        <span class="token keyword">if</span> Face <span class="token keyword">in</span> chain<span class="token punctuation">:</span>\n            <span class="token keyword">pass</span>\n\n        <span class="token comment"># 指定了是“笑脸”表情，判断消息链中是否包含笑脸</span>\n        <span class="token keyword">if</span> Face<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">in</span> chain<span class="token punctuation">:</span>\n            <span class="token keyword">pass</span>\n\n        <span class="token comment"># chain.has的效果与in一致</span>\n        <span class="token keyword">if</span> chain<span class="token punctuation">.</span>has<span class="token punctuation">(</span>Image<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">pass</span>\n\n        <span class="token comment"># 一个快捷操作，返回表情存在与否，与最后一个表情</span>\n        <span class="token comment"># 也可以指定具体的表情是否存在，has_and_last(Face(100))</span>\n        hasFace<span class="token punctuation">,</span> face <span class="token operator">=</span> chain<span class="token punctuation">.</span>has_and_last<span class="token punctuation">(</span>Face<span class="token punctuation">)</span> \n        <span class="token keyword">if</span> hasFace<span class="token punctuation">:</span>\n            <span class="token keyword">await</span> bot<span class="token punctuation">.</span>group_msg<span class="token punctuation">(</span>face<span class="token punctuation">)</span>\n\n        <span class="token comment"># 获取消息链中的所有表情</span>\n        faces <span class="token operator">=</span> chain<span class="token punctuation">.</span>faces\n\n        <span class="token comment"># 支持切片操作</span>\n        firstFace <span class="token operator">=</span> faces<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n\n        <span class="token comment"># 也支持其它消息片段</span>\n        images <span class="token operator">=</span> chain<span class="token punctuation">.</span>images\n        images<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>\n\n        <span class="token comment"># 可以直接对chain进行正则操作，不用手动使用re库</span>\n        <span class="token keyword">if</span> chain<span class="token punctuation">.</span>regex<span class="token punctuation">(</span><span class="token string">&quot;请?禁言我?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">await</span> sender<span class="token punctuation">.</span>ban<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">if</span> chain<span class="token punctuation">.</span>regex<span class="token punctuation">(</span><span class="token string">&quot;有人(在|吗|嘛|在吗).?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token comment"># 发送一条群消息</span>\n            <span class="token comment"># 接受任意个参数，必须是合法的消息片段，比如Text，Face，Image</span>\n            <span class="token keyword">await</span> bot<span class="token punctuation">.</span>group_msg<span class="token punctuation">(</span> \n                Text<span class="token punctuation">(</span><span class="token string">&quot;没人&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                Face<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span>\n            <span class="token punctuation">)</span>\n\n        <span class="token comment"># 对于多条件判断，提供了any，每一个参数都是一个正则</span>\n        <span class="token keyword">if</span> chain<span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token string">&quot;能&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;可以&quot;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> chain<span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token string">&quot;考试&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token comment"># 引用回复</span>\n            <span class="token keyword">await</span> chain<span class="token punctuation">.</span>reply<span class="token punctuation">(</span> \n                Text<span class="token punctuation">(</span><span class="token string">&quot;支持班级测试，不过题目收录不完整\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                Text<span class="token punctuation">(</span><span class="token string">&quot;为什么不自己试一试呢？&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                Face<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>\n            <span class="token punctuation">)</span>\n</code></pre></div>',3);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
